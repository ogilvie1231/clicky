{"version":3,"sources":["components/cards/index.js","images.js","components/header/header.js","components/score/score.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","className","onClick","clicked","id","src","url","alt","images","HeaderDisp","ScoreDisp","score","shuffle","require","App","state","length","displayImage","arg","setState","handleOnClick","event","target","name","value","win","console","log","alert","pictureId","includes","scoreUpdate","push","this","map","image","key","img","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oVAceA,G,YAXD,SAACC,GACX,OACI,yBAAKC,UAAU,UACX,yBAAKC,QAAS,WACVF,EAAMG,QAASH,EAAMI,KACtBC,IAAKL,EAAMM,IAAKC,IAAI,uBC4CpBC,EAnDf,CACI,CACI,GAAM,EACN,IAAO,iBAEX,CACI,GAAM,EACN,IAAO,iBAEX,CACI,GAAM,EACN,IAAO,iBAEX,CACI,GAAM,EACN,IAAO,iBAEX,CACI,GAAM,EACN,IAAO,iBAEX,CACI,GAAM,EACN,IAAO,iBAEX,CACI,GAAM,EACN,IAAO,iBAEX,CACI,GAAM,EACN,IAAO,iBAEX,CACI,GAAM,EACN,IAAO,iBAEX,CACI,GAAM,EACN,IAAO,kBAEX,CACI,GAAM,GACN,IAAO,kBAEX,CACI,GAAM,GACN,IAAO,mB,MCpCAC,MATf,WACI,OACJ,yBAAKR,UAAU,aACX,4CACA,sE,MCIWS,MARf,SAAmBV,GACf,OACJ,yBAAKC,UAAU,YACX,sCAAYD,EAAMW,MAAlB,OCCAC,EAAUC,EAAQ,IA+FPC,E,2MA1FfC,MAAQ,CACNJ,MAAO,EACPH,OAAQA,EACRQ,OAAQ,EACRb,QAAS,I,EAGXc,aAAe,SAAAC,GAEb,IAAMV,EAAS,EAAKO,MAAMP,OAE1B,EAAKW,SAAS,CAAEX,Y,EAGlBY,cAAgB,SAAAC,GAAU,IAAD,EAECA,EAAMC,OAAtBC,EAFe,EAEfA,KAAMC,EAFS,EAETA,MACd,EAAKL,SAAL,eACGI,EAAOC,K,EAKZC,IAAM,WACQ,EAAKV,MAAMJ,MAAvB,IACIR,EAAU,EAAKY,MAAMZ,QACzBuB,QAAQC,IAAI,WAAYxB,EAAQa,QACT,KAAnBb,EAAQa,SACVY,MAAM,YACN,EAAKT,SAAS,CACZR,MAAO,EACPR,QAAS,O,EAKfA,QAAS,SAAC0B,GACR,IAAI1B,EAAU,EAAKY,MAAMZ,QACrBK,EAAS,EAAKO,MAAMP,OAOxB,GALAkB,QAAQC,IAAI,eAAgBE,GAG5BH,QAAQC,IAAI,YAAa,EAAKZ,MAAMZ,SAEhCA,EAAQ2B,SAASD,GACnBD,MAAM,aACN,EAAKT,SAAS,CACZR,MAAO,EACPR,QAAS,KAEXS,EAAQJ,OACH,CACL,IAAIuB,EAAc,EAAKhB,MAAMJ,MAC7BoB,GAA4B,EAC5B,EAAKZ,SAAS,CACZR,MAAOoB,IAET5B,EAAQ6B,KAAKH,GACbjB,EAAQJ,GACR,EAAKiB,Q,wEAKC,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACFd,MAAOsB,KAAKlB,MAAMJ,QAClB,6BACA,kBAAC,EAAD,OAECsB,KAAKlB,MAAMP,OAAO0B,KAAI,SAAAC,GACrB,OACE,kBAAC,EAAD,CACE/B,GAAI+B,EAAM/B,GACVgC,IAAKD,EAAM/B,GACXE,IAAK6B,EAAME,IACXlC,QAAS,EAAKA,kB,GAjFNmC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6a7c7af1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Cards = (props) => {\n    return (\n        <div className=\"imgDiv\">\n            <img onClick={() => {\n                props.clicked (props.id)\n            }} src={props.url} alt=\"star-wars-photo\"/>\n            {/* <h3>Card {props.url} {props.type}</h3> */}\n        </div>\n    )\n}\n\nexport default Cards;","let images = \n[\n    {\n        \"id\": 0,\n        \"img\": \"/images/1.jpg\"\n    },\n    {\n        \"id\": 1,\n        \"img\": \"/images/2.jpg\"\n    },\n    {\n        \"id\": 2,\n        \"img\": \"/images/3.jpg\"\n    }, \n    {\n        \"id\": 3,\n        \"img\": \"/images/4.jpg\"\n    },\n    {\n        \"id\": 4,\n        \"img\": \"/images/5.jpg\"\n    },\n    {\n        \"id\": 5,\n        \"img\": \"/images/6.jpg\"\n    },\n    {\n        \"id\": 6,\n        \"img\": \"/images/7.jpg\"\n    },\n    {\n        \"id\": 7,\n        \"img\": \"/images/8.jpg\"\n    },\n    {\n        \"id\": 8,\n        \"img\": \"/images/9.jpg\"\n    },\n    {\n        \"id\": 9,\n        \"img\": \"/images/10.jpg\"\n    },\n    {\n        \"id\": 10,\n        \"img\": \"/images/11.jpg\"\n    },\n    {\n        \"id\": 11,\n        \"img\": \"/images/12.jpg\"\n    }\n]\n\nexport default images","import React from \"react\";\nimport \"./header.css\";\n\nfunction HeaderDisp() {\n    return  (\n<div className=\"headerDiv\">\n    <h1>Clicky Game!</h1>\n    <h3>Click an image below to get started!</h3> \n</div>\n)\n}\n\nexport default HeaderDisp","import React from \"react\";\nimport \"./score.css\";\n\nfunction ScoreDisp(props) {\n    return  (\n<div className=\"scoreDiv\">\n    <h2>Score: {props.score} </h2> \n</div>\n)\n}\n\nexport default ScoreDisp","import React, { Component, Fragment } from 'react';\nimport './App.css';\n// import logo from './logo.svg';\nimport Cards from './components/cards';\nimport images from './images'\nimport HeaderDisp from './components/header/header'\nimport ScoreDisp from './components/score/score';\nvar shuffle = require('shuffle-array');\n\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\nstate = {\n  score: 0,\n  images: images,\n  length: 0,\n  clicked: []\n};\n\ndisplayImage = arg => {\n  // Filter this.state.friends for friends with an id not equal to the id being removed\n  const images = this.state.images\n  // Set this.state.friends equal to the new friends array\n  this.setState({ images });\n};\n\nhandleOnClick = event => {\n\n  const { name, value } = event.target;\n  this.setState({\n    [name]: value\n  });\n \n};\n\nwin = () => {\n  let score = this.state.score\n  let clicked = this.state.clicked\n  console.log('length: ', clicked.length)\n  if (clicked.length === 12) {\n    alert(\"You Win!\")\n    this.setState({\n      score: 0,\n      clicked: []\n    })\n  }\n}\n\nclicked =(pictureId) => {\n  let clicked = this.state.clicked\n  let images = this.state.images\n\n  console.log('picture id: ', pictureId)\n  \n\n  console.log('clicked: ', this.state.clicked)\n  \n  if (clicked.includes(pictureId)) {\n    alert(\"You Lose!\")\n    this.setState({\n      score: 0,\n      clicked: []\n    })\n    shuffle(images)\n  } else {\n    let scoreUpdate = this.state.score\n    scoreUpdate = scoreUpdate + 1\n    this.setState({\n      score: scoreUpdate\n    })\n    clicked.push(pictureId)\n    shuffle(images)\n    this.win()\n  }\n}\n\n\nrender() {\n  return (\n    <div>\n      <ScoreDisp \n    score={this.state.score}/>\n    <div>\n    <HeaderDisp />\n    </div>\n    {this.state.images.map(image => {\n      return(\n        <Cards\n          id={image.id}\n          key={image.id}\n          url={image.img}\n          clicked={this.clicked}\n        />\n      )\n    })}\n         \n    </div>\n  );\n}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}